{"version":3,"sources":["js/parseCSS.js","js/getPens.js","js/usePens.js","components/PenCard.js","components/Tag.js","components/Code.js","App.js","js/createPen.js","serviceWorker.js","index.js"],"names":["parseCSS","paramCSS","cssToParse","cssParser","parse","stringify","sourcemap","code","e","parsePens","apiResponse","list","map","pen","id","name","info","html","bg","steps","usePens","useState","loadingPens","setLoadingPens","pens","setPens","useEffect","fetch","then","res","json","PenCard","active","href","className","key","Tag","dangerouslySetInnerHTML","__html","Code","parsedCode","handleUpdateRawCode","codeTag","useRef","timeout","setTimeout","hljs","highlightBlock","current","clearTimeout","ref","onBlur","textContent","contentEditable","suppressContentEditableWarning","autoCorrect","autoComplete","autoCapitalize","spellCheck","App","currentHash","window","location","hash","replace","penID","setPenID","setPen","step","setStep","totalSteps","setTotalSteps","stepInfo","setStepInfo","rawCode","setRawCode","setParsedCode","autoplay","setAutoplay","showPenList","setShowPenList","handlerHashChange","addEventListener","handleClosePenList","removeEventListener","newPen","newID","find","item","console","log","createPen","length","newStep","newInfo","notNext","notPrev","onClick","style","background","disabled","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc9e66c9.chunk.js","sourcesContent":["import cssParser from 'css'\n\nexport function parseCSS (paramCSS) {\n  try {\n    const cssToParse = cssParser.parse(paramCSS)\n    const cssResult = cssParser.stringify(cssToParse, { sourcemap: true })\n    return cssResult.code\n  } catch (e) {\n    return paramCSS\n  }\n}\n","const API_URL = './pens.json'\n\nconst parsePens = apiResponse => {\n  const { list = [] } = apiResponse\n\n  const pens = list.map(pen => {\n    const { id, name, info, html, bg, steps } = pen\n    return { id, name, info, html, bg, steps }\n  })\n\n  return pens\n}\n\nexport default function getPens () {\n  return fetch(API_URL)\n  .then(res => res.json())\n  .then(parsePens)\n}\n","import { useEffect, useState } from 'react'\nimport getPens from './getPens'\n\nexport function usePens () {\n  const [loadingPens, setLoadingPens] = useState(true)\n  const [pens, setPens] = useState(false)\n\n  useEffect(() => {\n    getPens()\n      .then(pens => {\n        setPens(pens)\n        setLoadingPens(false)\n      })\n  }, [])\n\n  return { loadingPens, pens }\n}\n","import React from 'react'\n// import { Link } from 'wouter'\n\nexport default function PenCard ({ pen, active }) {\n  const { id, name, info } = pen\n\n  return <a href={`#${id}`} className={`PenCard ${(id === active) ? 'active' : ''}`} key={id}>\n  <div className='PenCard__title'>{name}</div>\n  <div className='PenCard__description'>{info}</div>\n</a>\n}\n","import React from 'react'\n\nexport default function Tag ({html, className=''}) {\n  return <div className={className} dangerouslySetInnerHTML={{__html: html}} />\n}\n","import React, { useEffect, useRef } from 'react'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/atom-one-dark.css'\n\n/**\n *\n * @param parsedCode Parsed CSS code\n * @param handleUpdateRawCode Method to update the state in the parent component\n */\nexport default function Code ({ parsedCode, handleUpdateRawCode }) {\n  const codeTag = useRef()\n\n  useEffect(() => {\n    const timeout = setTimeout(() => hljs.highlightBlock(codeTag.current), 0)\n\n    return () => clearTimeout(timeout)\n  }, [parsedCode])\n\n  function update() {\n    handleUpdateRawCode(codeTag.current.textContent)\n  }\n\n  function handleBlur() {\n    update()\n  }\n\n  return (\n    <pre className=\"Code__pre\">\n      <code\n        ref={codeTag}\n        className=\"Code__tag css\"\n        onBlur={handleBlur}\n        contentEditable=\"true\"\n        suppressContentEditableWarning=\"true\"\n        autoCorrect=\"off\"\n        autoComplete=\"off\"\n        autoCapitalize=\"off\"\n        spellCheck=\"false\">{parsedCode}</code>\n    </pre>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { parseCSS } from './js/parseCSS'\nimport { usePens } from './js/usePens'\nimport createPen from './js/createPen'\nimport PenCard from './components/PenCard'\nimport Tag from './components/Tag'\nimport Code from './components/Code'\n\nconst DEFAULT_PEN_ID = 'heart'\n\nexport default function App () {\n  const {loadingPens, pens} = usePens()\n  const currentHash = () => window.location.hash.replace('#', '') || DEFAULT_PEN_ID\n  const [penID, setPenID] = useState(currentHash())\n  const [pen, setPen] = useState(false)\n  const [step, setStep] = useState(0)\n  const [totalSteps, setTotalSteps] = useState(0)\n  const [stepInfo, setStepInfo] = useState()\n  const [rawCode, setRawCode] = useState()\n  const [parsedCode, setParsedCode] = useState()\n  const [autoplay, setAutoplay] = useState()\n  const [showPenList, setShowPenList] = useState()\n\n  useEffect(() => {\n    // Subscribe on hash changes\n    const handlerHashChange = () => setPenID(currentHash())\n    window.addEventListener('hashchange', handlerHashChange)\n\n    // Close pen list menu when pen is selected\n    handleClosePenList()\n\n    return () => window.removeEventListener('hashchange', handlerHashChange)\n  }, [penID])\n\n  useEffect(() => {\n    if(!loadingPens && pens && penID){\n\n      const newPen = createPen(penID, pens)\n\n      if(!newPen) {\n        console.log('useEffect [loadingPens, pens, id] - Pen not found')\n        return false\n      }\n\n      setPen(newPen)\n      setStep(0)\n      setTotalSteps(newPen.steps.length)\n      setStepInfo(newPen.steps[0].info)\n      setRawCode(newPen.steps[0].code)\n      setParsedCode(parseCSS(newPen.steps[0].code))\n      setAutoplay(true)\n    }\n  }, [loadingPens, pens, penID])\n\n  // When step changes\n  useEffect(() => {\n    if(!pen) return false\n\n    const newStep = pen.steps[step]\n    if(!newStep) return\n\n    // Step info\n    const newInfo = newStep.info || `Step ${step + 1}`\n    setStepInfo(newInfo)\n\n    // Raw code\n    setRawCode(newStep.code)\n\n    // Parsed Code\n    setParsedCode(parseCSS(newStep.code))\n  }, [step, pen])\n\n  // Play\n  useEffect(() => {\n    if(autoplay) {\n      const timeout = setTimeout(() => {\n        if (step >= pen.steps.length - 1) {\n          setAutoplay(false)\n        } else {\n          setStep(step => step + 1)\n        }\n      }, 1000)\n\n      return () => clearTimeout(timeout)\n    }\n  }, [autoplay, step, pen.steps])\n\n  function handlePlayStop() {\n    const newAutoplay = !autoplay\n    setAutoplay(newAutoplay)\n  }\n\n  // Functions to check is can move to next or previous step\n  const notNext = () => step + 1 >= totalSteps\n  const notPrev = () => step <= 0\n\n  function handleNext() {\n    if (notNext()) return\n\n    setAutoplay(false)\n    setStep(step => step + 1)\n  }\n\n  function handlePrev() {\n    if (notPrev()) return\n\n    setAutoplay(false)\n    setStep(step => step - 1)\n  }\n\n  // Mobile menu with the list of Pens\n  function handleMore() { setShowPenList('show-pen-list') }\n  function handleClosePenList() { setShowPenList('') }\n\n  if(loadingPens || !pen) {\n    return <div className='Spinner' />\n  }\n\n  return (\n    <div className={`App ${showPenList}`}>\n      <div className='PenList'>\n        <button className='Button PenList__close' onClick={handleClosePenList}>Close</button>\n\n        {pens.map((item) => <PenCard key={item.id} pen={item} active={penID} />)}\n      </div>\n\n      <div className='Editor' style={{background: pen.bg}}>\n        <div className='Editor__code'>\n          <div className='Editor__step-info'>{stepInfo}</div>\n\n          <div className='Code'>\n            <Code parsedCode={parsedCode} handleUpdateRawCode={setRawCode} />\n\n            <Tag html={`<style type=\"text/css\">${rawCode}</style>`} />\n          </div>\n\n          <div className='Buttons Editor__buttons'>\n            <button className='Button' onClick={handlePlayStop}>{autoplay ? 'Stop' : 'Play'}</button>\n            <button className='Button' disabled={true}>{`${step + 1}/${totalSteps}`}</button>\n            <button className='Button' onClick={handlePrev} disabled={notPrev()}>{'<'}</button>\n            <button className='Button' onClick={handleNext} disabled={notNext()}>{'>'}</button>\n            <button className='Button button--more' onClick={handleMore}>More!</button>\n          </div>\n        </div>\n\n        <Tag html={pen.html} className='Editor__html' />\n      </div>\n    </div>\n  )\n}\n","  /**\n   *\n   * @param {string} newID - ID of the pen to load\n   * @param {array} pens - List of pens\n   * @returns {object} - Pen object\n   */\n   export default function createPen (newID, pens) {\n    const newPen = pens.find(item => item.id === newID)\n\n    if(!newPen) {\n      console.log('createPen() - Pent not found')\n      return false\n    }\n\n    const { id, name, info, html, bg, steps } = newPen\n\n    return { id, name, info, html, bg, steps }\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}